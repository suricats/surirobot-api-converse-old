'use strict';

exports.checkSTTRequest = function(args, res, toReturn) {
	if (!args.audio || !args.audio || !args.audio.value || !args.audio.value.buffer) {
		res.statusCode = 400;
        res.statusMessage = "Converse API: Bad request: missing audio field";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	if (!args.language || !args.language.value) {
		res.statusCode = 400;
        res.statusMessage = "Converse API: Bad request: missing language field";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}

	return true;
};

exports.checkConverseRequest = function(args, res, toReturn) {
	if (!args.audio || !args.audio.value || !args.audio.value.buffer) {
		res.statusCode = 400;
        res.statusMessage = "Converse API: Bad request: missing audio field";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	if (!args.language || !args.language.value) {
		res.statusCode = 400;
        res.statusMessage = "Converse API: Bad request: missing language field";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	if (!args.userId || !args.userId.value) {
		res.statusCode = 400;
        res.statusMessage = "Converse API: Bad request: missing userId field";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}

	return true;
};

exports.checkUpdateMemoryRequest = function(args, res, toReturn) {
	if (!args.field) {
		res.statusCode = 400;
        res.statusMessage = "Converse API: Bad request: missing 'field' field";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	if (!args.userId) {
		res.statusCode = 400;
        res.statusMessage = "Converse API: Bad request: missing 'userId' field";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}

	return true;
};

exports.checkSTTresponse = function(res_stt, res, toReturn) {
	return !(!res_stt || !res_stt.body || !res_stt.body.data || !res_stt.body.data.text);
}

exports.checkSTTresult = function(text, res, toReturn) {
	if (!text || !text.match(/[a-z0-9]/i)) {
		res.statusCode = 503;
        res.statusMessage = "Converse API: Input text extracted with STT is empty";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	return true;
};

exports.checkTTSresult = function(ttsRes, res, toReturn) {
	if (!ttsRes || !ttsRes.body || !ttsRes.body.downloadLink || ttsRes.body.downloadLink.trim().length == 0) {
		res.statusCode = 503;
        res.statusMessage = "Converse API: Output voice could not be generated by STT: no returned link";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	return true;
}

exports.checkNLPGetAnswerresult = function(nlp_res, res, toReturn) {
	if (!nlp_res || !nlp_res.body || !nlp_res.body.results || !nlp_res.body.results.messages) {
		res.statusCode = 503;
        res.statusMessage = "Converse API: NLP /getanswer could not retrieve any response to the input text";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	return true;
}

exports.checkTTSinput = function(text, res, toReturn) {
	if (!text || !text.match(/[a-z0-9]/i)) {
		res.statusCode = 503;
        res.statusMessage = "Converse API: Text in input for TTS was empty.";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	return true;
}

exports.checkCryptonewsOutput = function(text, res, toReturn) {
	if (!text) {
		res.statusCode = 503;
        res.statusMessage = "Converse API: Text in output of crypto-news API was empty.";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	return true;
}

exports.checkWeatherResult = function(w_res, res, toReturn) {
	if (!w_res || !w_res.body || !w_res.body.messages || w_res.body.messages.length < 2) {
		res.statusCode = 503;
        res.statusMessage = "Converse API: Error in WeatherAPI /getWeatherByCoords response: could not retrieve sentences resuming meteo";
        console.log(res.statusMessage);
        res.end(JSON.stringify(toReturn[Object.keys(toReturn)[0]] || {}, null, 2));
		return false;
	}
	return true;
}
